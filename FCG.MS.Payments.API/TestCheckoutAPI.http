### FCG MS Payments API - Checkout Tests
### This file contains test requests for the Checkout API

### Test 1: Create Checkout - John Doe buying Cyberpunk 2077
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "game_cp2077",
  "quantity": 1
}

### Test 2: Create Checkout - Jane Smith buying Elden Ring
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_67890",
  "productId": "game_elden_ring",
  "quantity": 1
}

### Test 3: Create Checkout - Bob Johnson buying FIFA 24 (Multiple Quantity)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_11111",
  "productId": "game_fifa24",
  "quantity": 2
}

### Test 4: Create Checkout - Alice Brown buying Call of Duty
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_22222",
  "productId": "game_cod_mw3",
  "quantity": 1
}

### Test 5: Create Checkout - Charlie Wilson buying Zelda
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_33333",
  "productId": "game_zelda_totk",
  "quantity": 1
}

### Test 6: Create Checkout - Brazilian Customer buying Red Dead Redemption 2
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_brazil",
  "productId": "game_rdr2",
  "quantity": 1
}

### Test 7: Create Checkout - Premium Bundle Purchase
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "game_premium_bundle",
  "quantity": 1
}

### Test 8: Create Checkout - Fortnite Battle Pass
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_67890",
  "productId": "battlepass_fortnite",
  "quantity": 1
}

### Test 9: Create Checkout - Minecraft (Multiple Quantity)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_11111",
  "productId": "game_minecraft",
  "quantity": 3
}

### Test 10: Create Checkout - The Witcher 3
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_22222",
  "productId": "game_witcher3",
  "quantity": 1
}

### Test 11: Create Checkout with Invalid Customer ID (Should fail)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "non_existent_customer",
  "productId": "game_cp2077",
  "quantity": 1
}

### Test 12: Create Checkout with Invalid Product ID (Should fail)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "non_existent_product",
  "quantity": 1
}

### Test 13: Create Checkout with Zero Quantity (Should fail validation)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "game_cp2077",
  "quantity": 0
}

### Test 14: Create Checkout with Negative Quantity (Should fail validation)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "game_cp2077",
  "quantity": -1
}

### Test 15: Create Checkout with Missing Customer ID (Should fail validation)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "productId": "game_cp2077",
  "quantity": 1
}

### Test 16: Create Checkout with Missing Product ID (Should fail validation)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "quantity": 1
}

### Test 17: Create Checkout with Empty Customer ID (Should fail validation)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "",
  "productId": "game_cp2077",
  "quantity": 1
}

### Test 18: Create Checkout with Empty Product ID (Should fail validation)
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "",
  "quantity": 1
}

### Test 19: Create Checkout with Large Quantity
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_12345",
  "productId": "game_cp2077",
  "quantity": 10
}

### Test 20: Create Checkout - GTA V Purchase
POST {{baseUrl}}/api/checkout
Content-Type: application/json
X-API-Key: {{apiKey}}

{
  "customerId": "user_33333",
  "productId": "game_gtav",
  "quantity": 1
}

### Test 21: Get Payment Status (Replace with actual PaymentIntentId from previous requests)
GET {{baseUrl}}/api/checkout/payments/pi_1234567890
X-API-Key: {{apiKey}}

### Test 22: Get Payment Status with Invalid ID (Should fail)
GET {{baseUrl}}/api/checkout/payments/invalid_payment_id
X-API-Key: {{apiKey}}

### Test 23: Get Payment Status with Empty ID (Should fail validation)
GET {{baseUrl}}/api/checkout/payments/
X-API-Key: {{apiKey}}

### Environment Variables (set these in your IDE or environment)
# @baseUrl = https://localhost:7001
# @apiKey = your-api-key-here

### Instructions:
# 1. First, create customers using TestCustomersAPI.http
# 2. Then, create products using TestProductsAPI.http
# 3. Finally, test checkout using this file
# 4. Copy PaymentIntentId from checkout response to test payment status endpoint
